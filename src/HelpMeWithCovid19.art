(*******************************************************************************
* HelpMeWithCovid19.art - Azky
*
*
*******************************************************************************)
prelude { import java.util.HashMap; }

support {
HashMap<String, Integer> intVariables = new HashMap<String, Integer>();
HashMap<String, String> strVariables = new HashMap<String, String>();
HashMap<String, ARTGLLRDTHandle> userData = new HashMap<String, ARTGLLRDTHandle>();
CovidMain cM = new CovidMain();
}

whitespace &WHITESPACE
whitespace &COMMENT_NEST_ART
whitespace &COMMENT_LINE_C

statements ::= singleStatement | singleStatement statements

singleStatement ::= ID '=' e0 ';' { intVariables.put(ID1.v, e01.v); } |     (* varaible assignment uses three === *)

              'if' e0 'doThis' singleStatement< elseOpt<                   (* if singleStatement *)
              { if (e01.v != 0)
                  artEvaluate(singleStatement.singleStatement1, singleStatement);
                else
                  artEvaluate(singleStatement.elseOpt1, elseOpt1);
              } |

              'while' e0< 'runThis' singleStatement<                          (* while singleStatement *)
              { artEvaluate(singleStatement.e01, e01);
                while (e01.v != 0) {
                  artEvaluate(singleStatement.singleStatement1, singleStatement);
                  artEvaluate(singleStatement.e01, e01);
                }
              } |

              'userSymptoms' ID singleStatement< { userData.put(ID1.v, singleStatement.singleStatement1); } |

              'userTravels' ID singleStatement< { userData.put(ID1.v, singleStatement.singleStatement1); } |

              'userHealth' ID singleStatement< { userData.put(ID1.v, singleStatement.singleStatement1); } |

              'HelpMeWithCovid19' ID ';'
                { if (!userData.containsKey(ID1.v))
                    artText.println(ARTTextLevel.WARNING, "Hmm... You've called an 3 undefined property: " + ID1.v);
                  else
                    artEvaluate(userData.get(ID1.v), null);
                } |

              'ConsoleLog' '(' printElements ')' ';' |       (* print singleStatement *)

              '{' statements '}' |

              mainCall | YourAge |  Country | State

elseOpt ::= 'else' singleStatement | #

mainCall ::= 'Gender' genderType { cM.setGender(genderType1.v);} |
              subCall HealthType { cM.setHealth(subCall1.v); } |
              subCall2 SymptomsType { cM.setSymptoms(subCall21.v); } |
              subCall3 TravelsType { cM.setTravels(subCall31.v); }

subCall<leftExtent:int rightExtent:int v:String> ::= Health { subCall.v = artLexeme(subCall.leftExtent, subCall.rightExtent).trim(); }

subCall2<leftExtent:int rightExtent:int v:String> ::= Symptoms { subCall2.v = artLexeme(subCall2.leftExtent, subCall2.rightExtent).trim(); }

subCall3<leftExtent:int rightExtent:int v:String> ::= Travels { subCall3.v = artLexeme(subCall3.leftExtent, subCall3.rightExtent).trim(); }

HealthType <v:HealthEnums> ::=  # { HealthType.v = HealthEnums.NONE; } |
                             'Diabetic' { HealthType.v = HealthEnums.DIABETIC; } | 'High_Blood_Pressure' { HealthType.v = HealthEnums.HIGH_BLOOD_PRESSURE; } |
                             'Asthma' { HealthType.v = HealthEnums.ASTHMA; }

Health ::= 'Diabetic' | 'High_Blood_Pressure' | 'Asthma' | 'Weak_Immune'

genderType <v:GenderEnums>::= # { genderType.v = GenderEnums.NONE; } |
                             'Male' { genderType.v = GenderEnums.MALE; } | 'Female' { genderType.v = GenderEnums.FEMALE; } |
                             'Transgender' { genderType.v = GenderEnums.TRANSGENDER; }

Symptoms  ::=  'Cough' | 'Shortness_Of_Breath'  | 'Fever'

SymptomsType <v:SymptomsEnums> ::=  # { SymptomsType.v = SymptomsEnums.NONE; } |
                             'Cough' { SymptomsType.v = SymptomsEnums.COUGH; } | 'Shortness_Of_Breath' { SymptomsType.v = SymptomsEnums.SHORTNESS_OF_BREATH; } |
                             'Fever' { SymptomsType.v = SymptomsEnums.FEVER; }

Travels  ::= 'USA' | 'Chad' | 'China' | 'UK' | 'Spain' | 'Japan' | 'Italy'

TravelsType <v:TravelsEnums> ::=  # { TravelsType.v = TravelsEnums.NONE; } |
                             'USA' { TravelsType.v = TravelsEnums.USA; } | 'Italy' { TravelsType.v = TravelsEnums.ITALY; } |
                             'China' { TravelsType.v = TravelsEnums.CHINA; }

YourAge ::= 'YourAge' INTEGER
 { if (INTEGER1.v < 0 || INTEGER1.v > 123)
     artText.println(ARTTextLevel.WARNING, "That's not your age. Even Guinness world record record is 122 " + INTEGER1.v);
    else
      cM.setUserAge(INTEGER1.v);
 }

Country ::= 'Country' STRING_DQ { cM.setUserCountry(STRING_DQ1.v); }

State ::=  'State' STRING_DQ { cM.setUserState(STRING_DQ1.v); }

Comments ::= '//'

printElements ::= STRING_DQ { artText.printf("%s", STRING_DQ1.v); } |
                  STRING_DQ { artText.printf("%s", STRING_DQ1.v); } ',' printElements |
                  e0 { artText.printf("%d", e01.v); } | e0 { artText.printf("%d", e01.v); } ',' printElements

e0 <v:int> ::= e1 { e0.v = e11.v; } |
               e1 '>'  e1 { e0.v = e11.v >  e12.v ? 1 : 0; } |       (* Greater than *)
               e1 '<'  e1 { e0.v = e11.v <  e12.v ? 1 : 0; } |       (* Less than *)
               e1 '>=' e1 { e0.v = e11.v >= e12.v ? 1 : 0; } |       (* Greater than or equals*)
               e1 '<=' e1 { e0.v = e11.v <= e12.v ? 1 : 0; } |       (* Less than or equals *)
               e1 '==' e1 { e0.v = e11.v == e12.v ? 1 : 0; } |       (* Equal to *)
               e1 '!=' e1 { e0.v = e11.v != e12.v ? 1 : 0; }         (* Not equal to *)

e1 <v:int>  ::= e2 { e1.v = e21.v; } |
                e1 '+' e2 { e1.v = e11.v + e21.v; } |                (* Add *)
                e1 '-' e2 { e1.v = e11.v - e21.v; }                  (* Subtract *)

e2  <v:int> ::= e3 { e2.v= e31.v; } |
                e2 '*' e3 { e2.v = e21.v * e31.v; } |                (* Multiply *)
                e2 '/' e3 { e2.v = e21.v / e31.v; } |                (* Divide *)
                e2 '%' e3 { e2.v = e21.v % e31.v; }                  (* Mod *)

e3  <v:int> ::= e4 {e3.v = e41.v; } |
                '+' e3 {e3.v = e41.v; } |                            (* Posite *)
                '-' e3 {e3.v = -e41.v; }                             (* Negate *)

e4  <v:int> ::= e5 { e4.v = e51.v; } |
                e5 '**' e4 {e4.v = (int) Math.pow(e51.v, e41.v); }   (* exponentiate *)

e5  <v:int> ::= INTEGER {e5.v = INTEGER1.v; } |                      (* Integer literal *)
                ID { e5.v = intVariables.get(ID1.v); } |                (* Variable access *)
                '(' e1 { e5.v = e11.v; } ')'                          (* Parenthesised expression *)


ID <leftExtent:int rightExtent:int lexeme:String v:String> ::=
  &ID {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); }

INTEGER <leftExtent:int rightExtent:int lexeme:String v:int> ::=
  &INTEGER {INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); }

REAL <leftExtent:int rightExtent:int lexeme:String v:double> ::=
  &REAL {REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsInteger(REAL.leftExtent, REAL.rightExtent); }

STRING_DQ <leftExtent:int rightExtent:int lexeme:String v:String> ::=
  &STRING_DQ {STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent); STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); }
